{"version":3,"sources":["Components/Google.js","App.js","serviceWorker.js","index.js"],"names":["validationRules","required","val","undefined","phone","test","String","email","toLowerCase","FormValidator","props","handleFieldChange","e","newState","state","target","name","value","validateForm","handleSetTouched","field","isTouched","setState","getClassName","fieldName","isValid","fields","forEach","newField","errors","formValidationRules","vRule","rule","push","message","firstName","lastName","signupForm","this","className","onChange","onBlur","length","map","err","i","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c931dbe.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst validationRules = {\r\n  required: val => val !== null && val !== undefined && val !== \"\",\r\n  phone: phone => {\r\n    const re = /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\r\n    return re.test(String(phone));\r\n  },\r\n  email: email => {\r\n    const re = /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/;\r\n    return re.test(String(email).toLowerCase());\r\n  }\r\n};\r\n\r\nclass FormValidator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.formValidationRules = {\r\n      firstName: [\r\n        { rule: validationRules.required, message: \"First name is required\" }\r\n      ],\r\n      lastName: [\r\n        { rule: validationRules.required, message: \"Last name is required\" }\r\n      ],\r\n      phone: [\r\n        { rule: validationRules.phone, message: \"Phone number is invalid\" }\r\n      ],\r\n      email: [\r\n        { rule: validationRules.required, message: \"Email is required\" },\r\n        { rule: validationRules.email, message: \"Email is invalid\" }\r\n      ]\r\n    };\r\n\r\n    this.fields = [\"firstName\", \"lastName\", \"phone\", \"email\"];\r\n\r\n    this.state = {\r\n      signupForm: { isValid: false },\r\n      firstName: { value: \"\", isTouched: false, isValid: false, errors: [] },\r\n      lastName: { value: \"\", isTouched: false, isValid: false, errors: [] },\r\n      phone: { value: \"\", isTouched: false, isValid: false, errors: [] },\r\n      email: { value: \"\", isTouched: false, isValid: false, errors: [] }\r\n    };\r\n  }\r\n\r\n  handleFieldChange = e => {\r\n    let newState = { ...this.state };\r\n    newState[e.target.name].value = e.target.value;\r\n    this.validateForm(newState);\r\n  };\r\n\r\n  handleSetTouched = e => {\r\n    let field = { ...this.state[e.target.name], isTouched: true };\r\n    this.setState({ [e.target.name]: { ...field } });\r\n  };\r\n\r\n  getClassName = fieldName => {\r\n    const field = this.state[fieldName];\r\n    return field.isTouched && !field.isValid ? \"has-error\" : \"\";\r\n  };\r\n\r\n  validateForm = newState => {\r\n    newState = newState || { ...this.state };\r\n    this.fields.forEach(fieldName => {\r\n      let newField = newState[fieldName];\r\n      newField.errors = [];\r\n      newField.isValid = true;\r\n      this.formValidationRules[fieldName].forEach(vRule => {\r\n        if (!vRule.rule(this.state[fieldName].value)) {\r\n          newField.errors.push(vRule.message);\r\n          newField.isValid = false;\r\n        }\r\n        newState[fieldName] = newField;\r\n      });\r\n    });\r\n    this.setState(newState);\r\n  };\r\n\r\n  componentWillMount() {\r\n    this.validateForm();\r\n  }\r\n  render() {\r\n    const { firstName, lastName, phone, email } = this.state;\r\n    return (\r\n      <form>\r\n        <div className=\"field-group\">\r\n          <label>First Name</label>\r\n          <input\r\n            className={\r\n              firstName.isTouched && !firstName.isValid ? \"has-error\" : \"\"\r\n            }\r\n            name=\"firstName\"\r\n            value={firstName.value}\r\n            onChange={this.handleFieldChange}\r\n            onBlur={this.handleSetTouched}\r\n          />\r\n          {firstName.isTouched &&\r\n            firstName.errors.length > 0 &&\r\n            firstName.errors.map((err, i) => (\r\n              <span key={i} className=\"error-message\">\r\n                {err}\r\n              </span>\r\n            ))}\r\n        </div>\r\n        <div className=\"field-group\">\r\n          <label>Last Name</label>\r\n          <input\r\n            className={\r\n              lastName.isTouched && !lastName.isValid ? \"has-error\" : \"\"\r\n            }\r\n            name=\"lastName\"\r\n            value={this.state.lastName.value}\r\n            onChange={this.handleFieldChange}\r\n            onBlur={this.handleSetTouched}\r\n          />\r\n          {lastName.isTouched &&\r\n            lastName.errors.length > 0 &&\r\n            lastName.errors.map((err, i) => (\r\n              <span key={i} className=\"error-message\">\r\n                {err}\r\n              </span>\r\n            ))}\r\n        </div>\r\n        <div className=\"field-group\">\r\n          <label>Phone</label>\r\n          <input\r\n            className={phone.isTouched && !phone.isValid ? \"has-error\" : \"\"}\r\n            name=\"phone\"\r\n            value={this.state.phone.value}\r\n            onChange={this.handleFieldChange}\r\n            onBlur={this.handleSetTouched}\r\n          />\r\n          {phone.isTouched &&\r\n            phone.errors.length > 0 &&\r\n            phone.errors.map((err, i) => (\r\n              <span key={i} className=\"error-message\">\r\n                {err}\r\n              </span>\r\n            ))}\r\n        </div>\r\n        <div className=\"field-group\">\r\n          <label>Email</label>\r\n          <input\r\n            className={email.isTouched && !email.isValid ? \"has-error\" : \"\"}\r\n            name=\"email\"\r\n            value={this.state.email.value}\r\n            onChange={this.handleFieldChange}\r\n            onBlur={this.handleSetTouched}\r\n          />\r\n          {email.isTouched &&\r\n            email.errors.length > 0 &&\r\n            email.errors.map((err, i) => (\r\n              <span key={i} className=\"error-message\">\r\n                {err}\r\n              </span>\r\n            ))}\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormValidator;","import React from 'react';\nimport Comp1 from \"./Components/Google\"\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Comp1/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}